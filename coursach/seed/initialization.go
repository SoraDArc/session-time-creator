package seed

import (
	"coursach/db"
	"errors"
)

type dbtable struct {
	tableName string
	tableRows []string
}

// Create query for create tables.
func createTable(table dbtable) {
	rows := ""
	for index, row := range table.tableRows {
		rows += row
		if index < len(table.tableRows)-1 {
			rows += ", "
		}
	}
	query := "CREATE TABLE IF NOT EXISTS " + table.tableName + "(" + rows + ")"
	_, err := db.DbConnect.Exec(query)
	if err != nil {
		panic(errors.New("seed/initialization.go:createTable: не удалось создать таблицу - ").Error() + table.tableName)
	}
}

// Create query for tables.
func createTables() {

	Institute := dbtable{
		tableName: "institutes",
		tableRows: []string{
			"\"id\" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY",
			"\"title\" text NOT NULL",
			"\"short_title\" text NOT NULL",
		},
	}

	Lecturer := dbtable{
		tableName: "lecturers",
		tableRows: []string{
			"\"id\" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY",
			"\"short_name\" text NOT NULL",
			"\"surname\" text NOT NULL",
			"\"name\" text NOT NULL",
			"\"patronymic\" text NOT NULL",
		},
	}

	Cabinet := dbtable{
		tableName: "cabinets",
		tableRows: []string{
			"\"id\" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY",
			"\"title\" text NOT NULL",
			"\"cabinets_type\" text NOT NULL",
		},
	}

	TrainingDirection := dbtable{
		tableName: "training_directions",
		tableRows: []string{
			"\"id\" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY",
			"\"num\" integer NOT NULL",
			"\"code\" text NOT NULL",
			"\"title\" text NOT NULL",
			"\"level_of_education\" text NOT NULL",
			"\"institutes_id\" integer NOT NULL",
			"FOREIGN KEY (institutes_id) REFERENCES institutes(id) ON DELETE CASCADE",
		},
	}

	AcademicSubject := dbtable{
		tableName: "academic_subjects",
		tableRows: []string{
			"\"id\" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY",
			"\"title\" text NOT NULL",
			"\"training_directions_id\" integer NOT NULL",
			"FOREIGN KEY (training_directions_id) REFERENCES training_directions(id) ON DELETE CASCADE ON UPDATE CASCADE",
		},
	}

	GroupOfStudent := dbtable{
		tableName: "group_of_students",
		tableRows: []string{
			"\"id\" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY",
			"\"title\" text NOT NULL",
			"\"students_count\" integer NOT NULL",
			"\"training_directions_id\" integer NOT NULL",
			"FOREIGN KEY (training_directions_id) REFERENCES training_directions(id) ON DELETE CASCADE ON UPDATE CASCADE",
		},
	}
	LeadSubject := dbtable{
		tableName: "lead_subjects",
		tableRows: []string{
			"\"id\" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY",
			"\"academic_subjects_id\" integer NOT NULL",
			"FOREIGN KEY (academic_subjects_id) REFERENCES academic_subjects(id) ON DELETE CASCADE ON UPDATE CASCADE",
			"\"course\" integer NOT NULL",
			"\"group_of_students_id\" integer NOT NULL",
			"FOREIGN KEY (group_of_students_id) REFERENCES group_of_students(id) ON DELETE CASCADE ON UPDATE CASCADE",
			"\"lecturers_id\" integer NOT NULL",
			"FOREIGN KEY (lecturers_id) REFERENCES lecturers(id) ON DELETE CASCADE ON UPDATE CASCADE",
			"\"comment\" text",
		},
	}

	ResultDaysExam := dbtable{
		tableName: "result_days_exams",
		tableRows: []string{
			"\"id\" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY",
			"\"lead_subjects_id\" integer NOT NULL",
			"FOREIGN KEY (lead_subjects_id) REFERENCES lead_subjects(id) ON DELETE CASCADE ON UPDATE CASCADE",
			"\"consultation\" text",
			"\"exam\" text",
			"\"has_date\" text",
		},
	}

	createTable(Institute)
	createTable(Lecturer)
	createTable(Cabinet)
	createTable(TrainingDirection)
	createTable(AcademicSubject)
	createTable(GroupOfStudent)
	createTable(LeadSubject)
	createTable(ResultDaysExam)
}

// Start downloading data from files and creation tables.
func Init() {
	db.Connect("postgres", "12345678", "sessiontime")
	defer db.Close()
	createTables()
	SeedObjects("Institutes")
	SeedObjects("Lecturers")
	SeedObjects("Cabinets")
	SeedObjects("TrainingDirections")
	SeedObjects("AcademicSubjects")
	SeedObjects("GroupOfStudents")
	SeedObjects("LeadSubjects")
}
